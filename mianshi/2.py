# coding=utf-8
"""
默认，如果两个操作数都是整数，Python 2 自动执行整型计算。结果，5/2 值为 2，然而 5./2 值为 ```2.5``。
注意，尽管如此，你可以在 Python 2 中重载这一行为（比如达到你想在 Python 3 中的同样结果），通过添加以下导入：
from __future__ import division
也需要注意的是“双划线”（//）操作符将一直执行整除，而不管操作数的类型，这就是为什么 5.0//2.0 值为 2.0。
注： 在 Python 3 中，/ 操作符是做浮点除法，而 // 是做整除（即商没有余数，比如 10 // 3 其结果就为 3，余数会被截除掉，而 (-7) // 3 的结果却是 -3。这个算法与其它很多编程语言不一样，需要注意，它们的整除运算会向0的方向取值。而在 Python 2 中，/ 就是整除，即和 Python 3 中的 // 操作符一样，）
"""


def div1(x,y):
    print("%s/%s = %s" % (x, y, x/y))


def div2(x,y):
    print("%s//%s = %s" % (x, y, x//y))

div1(5, 2)
div1(5., 2)
div2(5, 2)
div2(5., 2.)
div2(5.0, 2)
